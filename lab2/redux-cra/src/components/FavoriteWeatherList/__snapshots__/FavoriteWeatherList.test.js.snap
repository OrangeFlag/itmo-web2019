// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FavoriteWeatherList test should render correctly 1`] = `
<FavoriteWeatherList
  favoriteTowns={
    Array [
      "Moscow",
      "Saint-Petersburg",
    ]
  }
  status={
    Object {
      "Moscow": "error",
      "Saint-Petersburg": "ok",
      "mainTown": "loading",
    }
  }
  weathers={
    Object {
      "Saint-Petersburg": Object {
        "cloudiness": 30,
        "humidity": 50,
        "icon": "04d",
        "mercuryPressure": 40,
        "temperature": 10,
        "town": "Saint-Petersburg",
        "wind": 20,
      },
      "mainTown": Object {
        "cloudiness": 30,
        "humidity": 50,
        "icon": "04d",
        "mercuryPressure": 40,
        "temperature": 10,
        "town": "Vitebsk",
        "wind": 20,
      },
    }
  }
>
  <div>
    <styled.div
      key="Moscow"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-EHOje",
              "isStatic": false,
              "lastClassName": "fveiBM",
              "rules": Array [
                "
  display: flex;
  flex-flow: row wrap;
  align-items: left;

  // width: 100%;


  * {
    margin-right: 16px;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-EHOje",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-EHOje fveiBM"
        >
          <WeatherWidget
            key="Moscow"
            status="error"
            town="Moscow"
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "bwaJXF",
                      "rules": Array [
                        "
  display: flex;
  flex-flow: row wrap;
  align-items: center;

  width: 76%;

  background-color: #0138a5;
  background-color: ___CSS_1___;

  color: #ffffff;
  color: ___CSS_2___;
  
  padding: 12px 10%;
  padding-top: ___CSS_3___;
  padding-bottom: ___CSS_4___;
  
  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.30);
  margin: 7px;


  * {
    margin-right: 16px;
  }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bdVaJa bwaJXF"
                >
                  <styled.p>
                    <StyledComponent
                      forwardedComponent={
                        Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "attrs": Array [],
                          "componentStyle": ComponentStyle {
                            "componentId": "sc-bxivhb",
                            "isStatic": false,
                            "lastClassName": "hYMqqw",
                            "rules": Array [
                              "
  font-size: 1.5em;
  text-align: center;
  color: #f27670;
",
                            ],
                          },
                          "displayName": "styled.p",
                          "foldedComponentIds": Array [],
                          "render": [Function],
                          "styledComponentId": "sc-bxivhb",
                          "target": "p",
                          "toString": [Function],
                          "usesTheme": false,
                          "warnTooManyClasses": [Function],
                          "withComponent": [Function],
                        }
                      }
                      forwardedRef={null}
                    >
                      <p
                        className="sc-bxivhb hYMqqw"
                      >
                        Ошибка при запросе погоды
                      </p>
                    </StyledComponent>
                  </styled.p>
                </div>
              </StyledComponent>
            </styled.div>
          </WeatherWidget>
          <RoundButton
            action={[Function]}
          >
            <styled.button
              onClick={[Function]}
              type="button"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "fWSkTI",
                      "rules": Array [
                        "
    border: 0;
    padding: 13px 16px;
    // height: 50px;
    // line-height: 50px;
    // border-radius: ___CSS_0___;
    // box-shadow: ___CSS_1___;
    outline: none;
    display: inline-block;
    text-align: center;
    text-decoration: none;
    font-size: 15px;
    border-radius: 4px;

    &:hover {
        text-decoration: none;
        background: #cccccc;
        color: ___CSS_3___;
    }
   

    &:focus {
        text-decoration: none;
        outline: none;
    }
",
                      ],
                    },
                    "displayName": "styled.button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "button",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                type="button"
              >
                <button
                  className="sc-ifAKCX fWSkTI"
                  onClick={[Function]}
                  type="button"
                >
                  x
                </button>
              </StyledComponent>
            </styled.button>
          </RoundButton>
        </div>
      </StyledComponent>
    </styled.div>
    <styled.div
      key="Saint-Petersburg"
    >
      <StyledComponent
        forwardedComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-EHOje",
              "isStatic": false,
              "lastClassName": "fveiBM",
              "rules": Array [
                "
  display: flex;
  flex-flow: row wrap;
  align-items: left;

  // width: 100%;


  * {
    margin-right: 16px;
  }
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-EHOje",
            "target": "div",
            "toString": [Function],
            "usesTheme": false,
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        forwardedRef={null}
      >
        <div
          className="sc-EHOje fveiBM"
        >
          <WeatherWidget
            cloudiness={30}
            humidity={50}
            icon="04d"
            key="Saint-Petersburg"
            mercuryPressure={40}
            status="ok"
            temperature={10}
            town="Saint-Petersburg"
            wind={20}
          >
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-bdVaJa",
                      "isStatic": false,
                      "lastClassName": "bwaJXF",
                      "rules": Array [
                        "
  display: flex;
  flex-flow: row wrap;
  align-items: center;

  width: 76%;

  background-color: #0138a5;
  background-color: ___CSS_1___;

  color: #ffffff;
  color: ___CSS_2___;
  
  padding: 12px 10%;
  padding-top: ___CSS_3___;
  padding-bottom: ___CSS_4___;
  
  box-shadow: 0px 2px 2px 0px rgba(0, 0, 0, 0.30);
  margin: 7px;


  * {
    margin-right: 16px;
  }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-bdVaJa",
                    "target": "div",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-bdVaJa bwaJXF"
                >
                  Saint-Petersburg
                  <img
                    alt=""
                    src="http://openweathermap.org/img/wn/04d@2x.png"
                  />
                  <p>
                    Temperature: 
                    10
                     °C
                    <br />
                    Wind: 
                    20
                     m/s
                    <br />
                    Cloudiness: 
                    30
                     %
                    <br />
                    Millimeter of mercury: 
                    40
                     mm
                    <br />
                    Humidity: 
                    50
                     %
                    <br />
                  </p>
                </div>
              </StyledComponent>
            </styled.div>
          </WeatherWidget>
          <RoundButton
            action={[Function]}
          >
            <styled.button
              onClick={[Function]}
              type="button"
            >
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": false,
                      "lastClassName": "fWSkTI",
                      "rules": Array [
                        "
    border: 0;
    padding: 13px 16px;
    // height: 50px;
    // line-height: 50px;
    // border-radius: ___CSS_0___;
    // box-shadow: ___CSS_1___;
    outline: none;
    display: inline-block;
    text-align: center;
    text-decoration: none;
    font-size: 15px;
    border-radius: 4px;

    &:hover {
        text-decoration: none;
        background: #cccccc;
        color: ___CSS_3___;
    }
   

    &:focus {
        text-decoration: none;
        outline: none;
    }
",
                      ],
                    },
                    "displayName": "styled.button",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "button",
                    "toString": [Function],
                    "usesTheme": false,
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
                onClick={[Function]}
                type="button"
              >
                <button
                  className="sc-ifAKCX fWSkTI"
                  onClick={[Function]}
                  type="button"
                >
                  x
                </button>
              </StyledComponent>
            </styled.button>
          </RoundButton>
        </div>
      </StyledComponent>
    </styled.div>
  </div>
</FavoriteWeatherList>
`;
